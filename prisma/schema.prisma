generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String @default("user")
  coupons       Int @default(0)
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  transfersFrom Transfer[] @relation("TransferFrom")
  transfersTo   Transfer[] @relation("TransferTo")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Drink {
  id      String @id @default(cuid())
  name    String @unique
  price   Int
  transactions Transaction[]
}

model Transaction {
  id        String    @id @default(cuid())
  userId    String
  drinkId   String    
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  drink     Drink     @relation(fields: [drinkId], references: [id], onDelete: NoAction)
}

model Transfer {
  id          String    @id @default(cuid())
  fromUserId  String
  toUserId    String
  amount      Int
  createdAt   DateTime  @default(now())
  fromUser    User      @relation(fields: [fromUserId], references: [id], onDelete: NoAction, name: "TransferFrom")
  toUser      User      @relation(fields: [toUserId], references: [id], onDelete: NoAction, name: "TransferTo")
}